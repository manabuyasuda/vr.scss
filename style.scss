//
// #Function
//

// @desc - pxの引数を渡して単位なしとremの相対値を返す関数です。
// @type Funciton
// @prop {Number} $fs - `font-size`に指定する値をpxで指定します。
// @prop {Number} $lh - `line-height`に指定する値をpxで指定します。
// @return {List} - 第一引数, 第二引数, 第二引数と第一引数の除算の単位なしの相対値, 第二引数と第一引数の除算のremの相対値
// @require {Map} $vr-font-sizes - フォントサイズと行の高さを定義しているマップです。
//
// @example scss - Usage
// vr(14px, 24px) => 14px, 24px, 1.715, 1.715rem
//
@function vr($fs, $lh) {
    // 小数点以下を3桁までに制限します。100に変更すると2桁に制限できます。
    $n: 1000;
    $vr: ceil(($lh / $fs) * $n) / $n;
    $rem: $vr * 1rem;
    @return ($fs, $lh, $vr, $rem);
}


// @desc - ブレイクポイントを管理するためのmapです。
// @type Map
// @prop {String} keys - ブレイクポイントのキーワードです。
// @prop {String} values - メディアクエリの条件です。
$vr-breakpoints: (
    'sm': 'screen and (min-width: 400px)',
    'md': 'screen and (min-width: 768px)',
    'lg': 'screen and (min-width: 1000px)',
    'xl': 'screen and (min-width: 1200px)',
) !default;


//
// #Font-size
//

// @desc - フォントサイズと行の高さを定義しているマップです。
// @prop {String} keys - keyは呼び出す時のキーワードになります。
// @prop {String} values - 呼び出される`font-size`と`line-height`になります。
// @requires {Function} vr - pxの引数を渡して単位なしとremの相対値を返す関数です。
// @see {Map} $vr-breakpoints - ブレイクポイントを管理するmapです。同じkeyを指定してくだい。
$vr-base-font-sizes: (
    'base': vr(14px, 24px),
    "lg": vr(16px, 28px),
) !default;

$vr-h1-font-sizes: (
    'base': vr(26px, 24px * 2),
    'lg': vr(30px, 28px * 2),
) !default;

$vr-h2-font-sizes: (
    'base': vr(22px, 24px),
    'lg': vr(26px, 28px),
) !default;

$vr-h3-font-sizes: (
    'base': vr(20px, 24px),
    'lg': vr(24px, 28px),
) !default;

$vr-h4-font-sizes: (
    'base': vr(16px, 24px),
    'lg': vr(20px, 28px),
) !default;

$vr-h5-font-sizes: (
    'base': vr(14px, 24px),
    'lg': vr(16px, 28px),
) !default;

$vr-h6-font-sizes: (
    'base': vr(12px, 24px),
    'lg': vr(14px, 28px),
) !default;

$vr-small-font-sizes: (
    'base': vr(12px, 24px),
    'lg': vr(14px, 28px),
) !default;


//
// #Vertical-rhythm
//

// @desc - Vertical-rhythmに対応した`font-size`(px)と`line-height`(単位なし)を返すmixinです。
// @type Mixin
// @prop {Map} $fs($vr-base-font-sizes) -
// @requires {Map} $vr-base-font-sizes - rootのフォントサイズと行の高さを定義しているマップです。
// @requires {Map} $vr-breakpoints - ブレイクポイントを管理するためのmapです。
//
// @example scss - Usage
// .foo {
//     @include vr-font-size($vr-base-font-sizes);
// }
//
// @example css - CSS output
// .foo {
//     font-size: 14px;
//     line-height: 1.715;
// }
//
// @media screen and (min-width: 1000px) {
//     .foo {
//         font-size: 16px;
//         line-height: 1.75;
//     }
// }
//
@mixin vr-font-size($fs: $vr-base-font-sizes) {
    $bp: $vr-breakpoints;
    @each $name, $unit in $fs {
        @if $name == "base" {
             font-size: nth($unit, 1);
             line-height: nth($unit, 3);
        } @else {
            @if map-has-key($bp, $name) {
                @media #{map-get($bp, $name)} {
                    font-size: nth($unit, 1);
                    line-height: nth($unit, 3);
                }
            }
        }
    }
}

// @desc - Vertical Rhythmに対応した余白を返します。
// @type Mixin
// @prop {String} $prop - プロパティ名を渡します。
// @prop {Number} $vr(1) - 指定したい行数を渡します。
// @prop {String} $important(false) - `!important`を指定したい場合は文字列`important`を渡します。
// @requires {Map} $vr-base-font-sizes - rootのフォントサイズと行の高さを定義しているマップです。
// @requires {Map} $vr-breakpoints - ブレイクポイントを管理するためのmapです。
//
// @example scss - Usage
// .foo {
//   @include my-vertical-rhythm(margin-top, 1);
//   @include my-vertical-rhythm(margin-bottom, 1);
// }
//
// @example css - CSS output
// .foo {
//   margin-top: 24px;
//   margin-bottom: 24px;
// }
// @media screen and (min-width: 1000px) {
//   .foo {
//     margin-top: 28px;
//   }
// }
// @media screen and (min-width: 1000px) {
//   .foo {
//     margin-bottom: 28px;
//   }
// }
//
@mixin vr-vertical-rhythm($prop, $vr: 1, $important: false) {
    @if ($important == "important") {
        $important: unquote("!important");
    } @else {
        $important: null;
    }
    $bp: $vr-breakpoints;
    @each $name, $unit in $vr-base-font-sizes {
        @if $name == "base" {
            #{$prop}: nth($unit, 2) * $vr $important;
        } @else {
            @if map-has-key($bp, $name) {
                @media #{map-get($bp, $name)} {
                    #{$prop}: nth($unit, 2) * $vr $important;
                }
            }
        }
    }
}


html {
    @include vr-font-size;
}

h1 {
    @include vr-font-size($vr-h1-font-sizes);
}

h2 {
    @include vr-font-size($vr-h2-font-sizes);
}

h3 {
    @include vr-font-size($vr-h3-font-sizes);
}

h4 {
    @include vr-font-size($vr-h4-font-sizes);
}

h5 {
    @include vr-font-size($vr-h5-font-sizes);
}

h6 {
    @include vr-font-size($vr-h6-font-sizes);
}

h1 {
    @include vr-vertical-rhythm(margin-top, 2);
    @include vr-vertical-rhythm(margin-bottom, 2);
}

h2, h3 {
    @include vr-vertical-rhythm(margin-top, 2);
    @include vr-vertical-rhythm(margin-bottom, 1);
}

h4, h5, h6,
p,
ul, ol, dl,
table,
pre,
address {
    margin-top: 0;
    @include vr-vertical-rhythm(margin-bottom, 1);
}

.grid {
    position: absolute;
    z-index: -1;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    .line {
        @include vr-font-size;
        box-shadow: 0 1px 0 #eee;
    }
}

p,
ul,
ol,
h1,
h2,
h3,
h4,
h5,
h6 {
    box-shadow: 0 1px 0 #faa, inset 0 1px 0 #faa;
}